% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nmfbin.R
\name{nmfbin}
\alias{nmfbin}
\title{Non-negative Matrix Factorization for Binary Data}
\usage{
nmfbin(
  V,
  k,
  divergence_type = "kl",
  init_method = "random",
  max.iter = 100,
  tol = 1e-05,
  learning_rate = 0.01,
  compute_marginal_divergences = FALSE
)
}
\arguments{
\item{V}{A binary matrix (with entries 0 or 1) to factorize.}

\item{k}{Number of components.}

\item{divergence_type}{Method for divergence calculation. Choices are "kl" for Kullback-Leibler divergence and "crossentropy" for binary cross-entropy.}

\item{init_method}{Method for matrix factor initialization. Choices are "svd" for Singular Value Decomposition and "random" for random values.}

\item{max.iter}{Maximum number of iterations for the factor update algorithm.}

\item{tol}{Tolerance for convergence in the factor update algorithm.}

\item{learning_rate}{Learning rate for gradient descent (only used with divergence_type = "crossentropy").}

\item{compute_marginal_divergences}{Logical indicating whether to compute the marginal divergences.}
}
\value{
A list containing the factor matrices W and H, the final divergence, and if compute_marginal_divergences=TRUE, a vector of marginal divergences.
}
\description{
Non-negative Matrix Factorization for Binary Data
}
\examples{
# Create a small binary matrix
V <- matrix(c(1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1), nrow = 3)

# Perform binary NMF with 2 components using KL divergence and random initialization
result <- nmfbin(V, k = 2, divergence_type = "kl", init_method = "random")

# Print factor matrices
print(result$W)
print(result$H)

# Check the final divergence
print(result$final_divergence)
}
